-- File auto generated by purescript-bridge! --
module FiatGame.QuoVadis where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Data.Tuple (Tuple)
import FiatGame.Types (FiatPlayer)
import Prim (Array, Boolean, Int)
import QuoVadis.Moves (Move)
import QuoVadis.Types (Edge, Laurel, PlayerState)

import Prelude
import Data.Generic (class Generic, gCompare, gEq, gShow)

newtype Settings =
    Settings {
      players :: Array FiatPlayer
    , playerMap :: Array (Tuple FiatPlayer Int)
    , turnTimeMilliseconds :: Int
    }

derive instance genericSettings :: Generic Settings

instance showSettings :: Show Settings where
  show = gShow
instance eqSettings :: Eq Settings where
  eq = gEq
instance ordSettings :: Ord Settings where
  compare = gCompare

derive instance newtypeSettings :: Newtype Settings _


--------------------------------------------------------------------------------
_Settings :: Iso' Settings { players :: Array FiatPlayer, playerMap :: Array (Tuple FiatPlayer Int), turnTimeMilliseconds :: Int}
_Settings = _Newtype

--------------------------------------------------------------------------------
newtype Committee =
    Committee {
      cNum :: Int
    , cPieces :: Array (Tuple Int (Array Int))
    }

derive instance genericCommittee :: Generic Committee

instance showCommittee :: Show Committee where
  show = gShow
instance eqCommittee :: Eq Committee where
  eq = gEq
instance ordCommittee :: Ord Committee where
  compare = gCompare

derive instance newtypeCommittee :: Newtype Committee _


--------------------------------------------------------------------------------
_Committee :: Iso' Committee { cNum :: Int, cPieces :: Array (Tuple Int (Array Int))}
_Committee = _Newtype

--------------------------------------------------------------------------------
newtype ClientGameState =
    ClientGameState {
      cPlayerState :: PlayerState
    , cBoard :: Array (Tuple Int Committee)
    , cEdges :: Array (Tuple Edge (Maybe Laurel))
    , cCaeser :: Edge
    , cCurrentTurn :: Int
    , cVotes :: Int
    , cBribes :: Array (Tuple Int (Array Laurel))
    , cInProgressVote :: Maybe Edge
    , cLaurelsToDispense :: Array Laurel
    , cPickedUpACaeserLaurel :: Boolean
    , cWinners :: Maybe (Array Int)
    , cRival :: Int
    , cMoves :: Array Move
    }

derive instance genericClientGameState :: Generic ClientGameState

instance showClientGameState :: Show ClientGameState where
  show = gShow
instance eqClientGameState :: Eq ClientGameState where
  eq = gEq
instance ordClientGameState :: Ord ClientGameState where
  compare = gCompare

derive instance newtypeClientGameState :: Newtype ClientGameState _


--------------------------------------------------------------------------------
_ClientGameState :: Iso' ClientGameState { cPlayerState :: PlayerState, cBoard :: Array (Tuple Int Committee), cEdges :: Array (Tuple Edge (Maybe Laurel)), cCaeser :: Edge, cCurrentTurn :: Int, cVotes :: Int, cBribes :: Array (Tuple Int (Array Laurel)), cInProgressVote :: Maybe Edge, cLaurelsToDispense :: Array Laurel, cPickedUpACaeserLaurel :: Boolean, cWinners :: Maybe (Array Int), cRival :: Int, cMoves :: Array Move}
_ClientGameState = _Newtype

--------------------------------------------------------------------------------
