-- File auto generated by purescript-bridge! --
module QuoVadis.Moves where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int)
import QuoVadis.Types (Edge, Laurel)

import Prelude
import Data.Generic (class Generic, gCompare, gEq, gShow)

data Move =
    MoveCaeser Edge
  | StartSenator Int
  | CallVote Edge
  | CastVote Int Int
  | Bribe Int Int (Array Laurel)
  | VoteOver
  | DispenseSupportLaurel Int
  | Pass

derive instance genericMove :: Generic Move

instance showMove :: Show Move where
  show = gShow
instance eqMove :: Eq Move where
  eq = gEq
instance ordMove :: Ord Move where
  compare = gCompare


--------------------------------------------------------------------------------
_MoveCaeser :: Prism' Move Edge
_MoveCaeser = prism' MoveCaeser f
  where
    f (MoveCaeser a) = Just $ a
    f _ = Nothing

_StartSenator :: Prism' Move Int
_StartSenator = prism' StartSenator f
  where
    f (StartSenator a) = Just $ a
    f _ = Nothing

_CallVote :: Prism' Move Edge
_CallVote = prism' CallVote f
  where
    f (CallVote a) = Just $ a
    f _ = Nothing

_CastVote :: Prism' Move { a :: Int, b :: Int }
_CastVote = prism' (\{ a, b } -> CastVote a b) f
  where
    f (CastVote a b) = Just $ { a: a, b: b }
    f _ = Nothing

_Bribe :: Prism' Move { a :: Int, b :: Int, c :: Array Laurel }
_Bribe = prism' (\{ a, b, c } -> Bribe a b c) f
  where
    f (Bribe a b c) = Just $ { a: a, b: b, c: c }
    f _ = Nothing

_VoteOver :: Prism' Move Unit
_VoteOver = prism' (\_ -> VoteOver) f
  where
    f VoteOver = Just unit
    f _ = Nothing

_DispenseSupportLaurel :: Prism' Move Int
_DispenseSupportLaurel = prism' DispenseSupportLaurel f
  where
    f (DispenseSupportLaurel a) = Just $ a
    f _ = Nothing

_Pass :: Prism' Move Unit
_Pass = prism' (\_ -> Pass) f
  where
    f Pass = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
