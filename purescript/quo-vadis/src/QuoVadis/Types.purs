-- File auto generated by purescript-bridge! --
module QuoVadis.Types where

import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Boolean, Int)

import Prelude
import Data.Generic (class Generic, gCompare, gEq, gShow)

newtype Laurel =
    Laurel {
      _lScore :: Int
    , _lIsCaeser :: Boolean
    }

derive instance genericLaurel :: Generic Laurel

instance showLaurel :: Show Laurel where
  show = gShow
instance eqLaurel :: Eq Laurel where
  eq = gEq
instance ordLaurel :: Ord Laurel where
  compare = gCompare

derive instance newtypeLaurel :: Newtype Laurel _


--------------------------------------------------------------------------------
_Laurel :: Iso' Laurel { _lScore :: Int, _lIsCaeser :: Boolean}
_Laurel = _Newtype

lScore :: Lens' Laurel Int
lScore = _Newtype <<< prop (SProxy :: SProxy "_lScore")

lIsCaeser :: Lens' Laurel Boolean
lIsCaeser = _Newtype <<< prop (SProxy :: SProxy "_lIsCaeser")

--------------------------------------------------------------------------------
newtype PlayerState =
    PlayerState {
      _psReserve :: Int
    , _psLaurels :: Array Laurel
    }

derive instance genericPlayerState :: Generic PlayerState

instance showPlayerState :: Show PlayerState where
  show = gShow
instance eqPlayerState :: Eq PlayerState where
  eq = gEq
instance ordPlayerState :: Ord PlayerState where
  compare = gCompare

derive instance newtypePlayerState :: Newtype PlayerState _


--------------------------------------------------------------------------------
_PlayerState :: Iso' PlayerState { _psReserve :: Int, _psLaurels :: Array Laurel}
_PlayerState = _Newtype

psReserve :: Lens' PlayerState Int
psReserve = _Newtype <<< prop (SProxy :: SProxy "_psReserve")

psLaurels :: Lens' PlayerState (Array Laurel)
psLaurels = _Newtype <<< prop (SProxy :: SProxy "_psLaurels")

--------------------------------------------------------------------------------
newtype Edge =
    Edge {
      _eFrom :: Int
    , _eTo :: Int
    }

derive instance genericEdge :: Generic Edge

instance showEdge :: Show Edge where
  show = gShow
instance eqEdge :: Eq Edge where
  eq = gEq
instance ordEdge :: Ord Edge where
  compare = gCompare

derive instance newtypeEdge :: Newtype Edge _


--------------------------------------------------------------------------------
_Edge :: Iso' Edge { _eFrom :: Int, _eTo :: Int}
_Edge = _Newtype

eFrom :: Lens' Edge Int
eFrom = _Newtype <<< prop (SProxy :: SProxy "_eFrom")

eTo :: Lens' Edge Int
eTo = _Newtype <<< prop (SProxy :: SProxy "_eTo")

--------------------------------------------------------------------------------
